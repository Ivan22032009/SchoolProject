require('dotenv').config();
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid'); // –î–æ–¥–∞–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó ID

const app = express();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω)
const corsOptions = {
  origin: ['https://schoolproject12.netlify.app', 'https://ecofast.space'],
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
};
app.use(cors(corsOptions));
app.use(express.json());

app.use((req, res, next) => {
  res.setHeader(
    'Content-Security-Policy',
    "script-src 'self' https://schoolproject-9nrp.onrender.com 'unsafe-eval';" +
    "default-src 'self';" +
    "style-src 'self' 'unsafe-inline';" // –î–æ–∑–≤–æ–ª–∏—Ç–∏ inline —Å—Ç–∏–ª—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  );
  next();
});
// –Ü–º—ñ—Ç–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É –ø–∞–º'—è—Ç—ñ
let users = [];

class InMemoryDB {
  static findUserByEmail(email) {
    return users.find(user => user.email === email);
  }

  static createUser(userData) {
    const user = { ...userData, id: uuidv4(), totalWeight: 0, totalPoints: 0 };
    users.push(user);
    return user;
  }

  static updateUser(userId, updateFn) {
    const userIndex = users.findIndex(u => u.id === userId);
    if (userIndex === -1) return null;
    users[userIndex] = updateFn(users[userIndex]);
    return users[userIndex];
  }

  static getLeaderboard() {
    return users.slice()
      .sort((a, b) => b.totalPoints - a.totalPoints)
      .slice(0, 10)
      .map(user => ({
        firstName: user.firstName,
        lastName: user.lastName,
        totalWeight: user.totalWeight,
        totalPoints: user.totalPoints
      }));
  }
}

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
app.post('/api/register', async (req, res) => {
  try {
    const { firstName, lastName, email, password } = req.body;
    
    if (!firstName || !lastName || !email || !password) {
      return res.status(400).json({ error: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è" });
    }

    if (InMemoryDB.findUserByEmail(email)) {
      return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = InMemoryDB.createUser({
      firstName,
      lastName,
      email,
      password: hashedPassword
    });

    res.status(201).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –í—Ö—ñ–¥
app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è" });
    }

    const user = InMemoryDB.findUserByEmail(email);
    if (!user) {
      return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
    }

    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET || 'secret_key', { expiresIn: '1h' });
    
    res.json({ 
      token, 
      email: user.email,
      firstName: user.firstName, 
      lastName: user.lastName
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
function verifyToken(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader?.startsWith('Bearer ')) {
    return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–¥–∞–Ω–æ" });
  }

  const token = authHeader.split(' ')[1];
  jwt.verify(token, process.env.JWT_SECRET || 'secret_key', (err, decoded) => {
    if (err) return res.status(403).json({ error: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    req.userId = decoded.id;
    next();
  });
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get('/api/user', verifyToken, (req, res) => {
  const user = users.find(u => u.id === req.userId);
  if (!user) return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
  res.json({ firstName: user.firstName, lastName: user.lastName });
});

app.post('/api/send-verification', async (req, res) => {
  const { email } = req.body;
  const verificationCode = Math.floor(100000 + Math.random() * 900000); // –ì–µ–Ω–µ—Ä—É—î–º–æ 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥

  try {
      await sendVerificationEmail(email, verificationCode);
      res.json({ message: "–ö–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!", code: verificationCode });
  } catch (error) {
      res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–¥" });
  }
});


// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥—Ö–æ–¥–∏
app.post('/api/submit', verifyToken, async (req, res) => {
  try {
    const weight = parseFloat(req.body.weight);
    if (isNaN(weight)) throw new Error("–ù–µ–≤—ñ—Ä–Ω–∞ –≤–∞–≥–∞");
    const updatedUser = InMemoryDB.updateUser(req.userId, (user) => {
      user.totalWeight += weight;
      user.totalPoints += Math.round(weight * 10);
      return user;
    });

    if (!updatedUser) throw new Error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    
    res.json({ 
      message: "–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ",
      user: {
        totalWeight: updatedUser.totalWeight,
        totalPoints: updatedUser.totalPoints
      }
    });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

require('dotenv').config();
const sgMail = require('@sendgrid/mail');
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

function sendVerificationEmail(toEmail, verificationCode) {
    const msg = {
        to: toEmail,
        from: process.env.SENDER_EMAIL,
        subject: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏',
        text: `–í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ${verificationCode}`,
        html: `<p>–í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: <strong>${verificationCode}</strong></p>`,
    };
    return sgMail.send(msg);
}


// –†–µ–π—Ç–∏–Ω–≥
app.get('/api/leaderboard', (req, res) => {
  res.json(InMemoryDB.getLeaderboard());
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`üü¢ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`));