require('dotenv').config();
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const nodemailer = require('nodemailer');

const app = express();

// ==================== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS ====================
const corsOptions = {
  origin: ['https://schoolproject12.netlify.app', 'https://ecofast.space'],
  methods: ['GET', 'POST', 'PUT'], // Now includes PUT
  allowedHeaders: ['Content-Type', 'Authorization']
};
app.use(cors(corsOptions));

// –ü–æ–ª—ñ—Ç–∏–∫–∞ –±–µ–∑–ø–µ–∫–∏ (CSP)
app.use((req, res, next) => {
  res.setHeader(
    'Content-Security-Policy',
    "script-src 'self' https://schoolproject-1-kkzu.onrender.com;" +
    "default-src 'self';" +
    "style-src 'self' 'unsafe-inline';" +
    "img-src 'self' data:;"
  );
  next();
});

app.use(express.json());

// ==================== –Ü–º—ñ—Ç–∞—Ü—ñ—è –ë–î ====================
let users = [];

class InMemoryDB {
  static findUserByEmail(email) {
    return users.find(user => user.email === email);
  }

  static createUser(userData) {
    const user = { 
      ...userData, 
      id: uuidv4(), 
      totalWeight: 0, 
      totalPoints: 0,
      verified: false // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–∂–¥–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    };
    users.push(user);
    return user;
  }

  static updateUser(userId, updateFn) {
    const userIndex = users.findIndex(u => u.id === userId);
    if (userIndex === -1) return null;
    users[userIndex] = updateFn(users[userIndex]);
    return users[userIndex];
  }

  static getLeaderboard() {
    return users
      .sort((a, b) => b.totalPoints - a.totalPoints)
      .slice(0, 10)
      .map(user => ({
        firstName: user.firstName,
        lastName: user.lastName,
        totalWeight: user.totalWeight,
        totalPoints: user.totalPoints
      }));
  }
}

// ==================== –†–æ—É—Ç–∏ ====================

// –§—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email
async function sendVerificationEmail(email, token) {
  const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
      }
  });

  const url = `http://localhost:3000/verify-email?token=${token}`;

  await transporter.sendMail({
      from: `"EcoFast" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
      html: `<h3>–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email:</h3><a href="${url}">${url}</a>`
  });
}


app.post('/api/register', async (req, res) => {
  try {
      const { firstName, lastName, email, password } = req.body;

      if (!firstName || !lastName || !email || !password) {
          return res.status(400).json({ error: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è" });
      }

      if (InMemoryDB.findUserByEmail(email)) {
          return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î" });
      }

      const hashedPassword = await bcrypt.hash(password, 10);
      const user = InMemoryDB.createUser({
          firstName,
          lastName,
          email,
          password: hashedPassword,
          verified: false
      });

      // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET || 'secret_key', { expiresIn: '1h' });

      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—Å—Ç–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      await sendVerificationEmail(email, token);

      res.json({ message: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è." });

  } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
      res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get('/api/verify-email', async (req, res) => {
  try {
      const { token } = req.query;
      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret_key');

      const user = users.find(u => u.id === decoded.id);
      if (!user) return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω" });

      user.verified = true;
      res.json({ message: "Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏." });
  } catch (error) {
      res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
});

// –í—Ö—ñ–¥
app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = InMemoryDB.findUserByEmail(email);
    
    if (!user) return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    if (!user.verified) return res.status(400).json({ error: "Email –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É." });

    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });

    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET || 'secret_key', { 
      expiresIn: '1h' 
    });

    res.json({ 
      token,
      firstName: user.firstName,
      lastName: user.lastName
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/user', (req, res) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" });

  try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret_key');
      const user = users.find(u => u.id === decoded.id);
      if (!user) return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
      
      res.json({
          firstName: user.firstName,
          lastName: user.lastName,
          email: user.email,
          avatar: user.avatar
      });
  } catch (error) {
      res.status(401).json({ error: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
});

// –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—é
app.put('/api/change-password', async (req, res) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" });

  try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret_key');
      const { oldPassword, newPassword } = req.body;
      
      const user = users.find(u => u.id === decoded.id);
      const validPassword = await bcrypt.compare(oldPassword, user.password);
      if (!validPassword) return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å" });

      const hashedPassword = await bcrypt.hash(newPassword, 10);
      user.password = hashedPassword;

      res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ" });
  } catch (error) {
      res.status(400).json({ error: error.message });
  }
});
app.post('/api/update-avatar', (req, res) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" });

  try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret_key');
      const user = users.find(u => u.id === decoded.id);
      if (!user) return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

      // –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      // –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ URL –∞–≤–∞—Ç–∞—Ä–∞
      user.avatar = req.body.avatarUrl;
      res.json({ message: "–ê–≤–∞—Ç–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ" });
  } catch (error) {
      res.status(400).json({ error: error.message });
  }
});

app.post('/api/submit-waste', (req, res) => {
  const token = req.headers.authorization?.split(' ')[1];
  const { weight } = req.body;
  
  const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret_key');
  const user = users.find(u => u.id === decoded.id);
  
  user.totalWeight += parseFloat(weight);
  user.totalPoints += Math.floor(weight * 10); // 10 –±–∞–ª—ñ–≤ –∑–∞ –∫–≥
  
  res.json({ success: true });
});

app.get('/api/leaderboard', (req, res) => {
  res.json(InMemoryDB.getLeaderboard());
});

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
app.put('/api/update-profile', (req, res) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" });

  try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret_key');
      const { firstName, lastName, email, bio, birthday, country, phone } = req.body;
    
    const updatedUser = InMemoryDB.updateUser(decoded.id, (user) => ({
        ...user,
        firstName,
        lastName,
        email, 
        bio,
        birthday,
        country,
        phone
    }));
    
    res.json(updatedUser);
  } catch (error) {
      res.status(400).json({ error: error.message });
  }
});
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`üü¢ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`));