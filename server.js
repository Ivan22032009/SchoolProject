require('dotenv').config();
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const nodemailer = require('nodemailer'); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è nodemailer

const app = express();

// ==================== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Nodemailer ====================
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,        // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, smtp.ecofast.space
  port: process.env.SMTP_PORT,        // –∑–∞–∑–≤–∏—á–∞–π 465 (SSL) –∞–±–æ 587 (TLS)
  secure: process.env.SMTP_PORT == 465, // true –¥–ª—è –ø–æ—Ä—Ç 465, —ñ–Ω–∞–∫—à–µ false
  auth: {
    user: process.env.SMTP_USER,      // SMTP –ª–æ–≥—ñ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, no-reply@ecofast.space)
    pass: process.env.SMTP_PASS       // SMTP –ø–∞—Ä–æ–ª—å
  }
});

// ==================== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS ====================
const corsOptions = {
  origin: ['https://schoolproject12.netlify.app', 'https://ecofast.space'],
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type', 'Authorization']
};
app.use(cors(corsOptions));

// –ü–æ–ª—ñ—Ç–∏–∫–∞ –±–µ–∑–ø–µ–∫–∏ (CSP)
app.use((req, res, next) => {
  res.setHeader(
    'Content-Security-Policy',
    "script-src 'self' https://schoolproject-1-kkzu.onrender.com;" +
    "default-src 'self';" +
    "style-src 'self' 'unsafe-inline';" +
    "img-src 'self' data:;"
  );
  next();
});

app.use(express.json());

// ==================== –Ü–º—ñ—Ç–∞—Ü—ñ—è –ë–î ====================
let users = [];

class InMemoryDB {
  static findUserByEmail(email) {
    return users.find(user => user.email === email);
  }

  static createUser(userData) {
    const user = { 
      ...userData, 
      id: uuidv4(), 
      totalWeight: 0, 
      totalPoints: 0,
      verified: false // –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–ø–æ—á–∞—Ç–∫—É –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    };
    users.push(user);
    return user;
  }

  static updateUser(userId, updateFn) {
    const userIndex = users.findIndex(u => u.id === userId);
    if (userIndex === -1) return null;
    users[userIndex] = updateFn(users[userIndex]);
    return users[userIndex];
  }

  static getLeaderboard() {
    return users
      .filter(user => user.verified)
      .sort((a, b) => b.totalPoints - a.totalPoints)
      .slice(0, 10)
      .map(user => ({
        firstName: user.firstName,
        lastName: user.lastName,
        totalWeight: user.totalWeight,
        totalPoints: user.totalPoints
      }));
  }
}

// ==================== –†–æ—É—Ç–∏ ====================

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
app.post('/api/register', async (req, res) => {
  try {
    const { firstName, lastName, email, password } = req.body;
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!firstName || !lastName || !email || !password) {
      return res.status(400).json({ error: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è" });
    }

    if (InMemoryDB.findUserByEmail(email)) {
      return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î" });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    const verificationCode = Math.floor(100000 + Math.random() * 900000);
    
    // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è email —á–µ—Ä–µ–∑ nodemailer
    const mailOptions = {
      from: 'no-reply@ecofast.space',
      to: email,
      subject: '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è EcoFast',
      text: `–í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ${verificationCode}`,
      html: `<p>–í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: <strong>${verificationCode}</strong></p>`
    };

    await transporter.sendMail(mailOptions);
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ö–µ—à–æ–≤–∞–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º
    const hashedPassword = await bcrypt.hash(password, 10);
    InMemoryDB.createUser({
      firstName,
      lastName,
      email,
      password: hashedPassword,
      verificationCode
    });

    res.json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ, –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ email" });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
app.post('/api/verify', (req, res) => {
  try {
    const { email, code } = req.body;
    
    if (!email || !code) {
      return res.status(400).json({ error: "Email —Ç–∞ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
    }
    
    const user = InMemoryDB.findUserByEmail(email);
    if (!user) {
      return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    
    if (user.verified) {
      return res.json({ message: "Email –≤–∂–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ" });
    }
    
    if (user.verificationCode.toString() === code.toString()) {
      user.verified = true;
      delete user.verificationCode;
      return res.json({ message: "Email —É—Å–ø—ñ—à–Ω–æ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ" });
    } else {
      return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è" });
    }
    
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –í—Ö—ñ–¥
app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    const user = InMemoryDB.findUserByEmail(email);
    if (!user) return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });

    if (!user.verified) return res.status(403).json({ error: "Email –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ" });

    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET || 'secret_key', { 
      expiresIn: '1h' 
    });

    res.json({ 
      token,
      firstName: user.firstName,
      lastName: user.lastName
    });

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
function verifyToken(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π" });

  jwt.verify(token, process.env.JWT_SECRET || 'secret_key', (err, decoded) => {
    if (err) return res.status(403).json({ error: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    req.userId = decoded.id;
    next();
  });
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥—Ö–æ–¥–∏
app.post('/api/submit', verifyToken, (req, res) => {
  try {
    const weight = parseFloat(req.body.weight);
    if (isNaN(weight)) throw new Error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–≥–∏");

    const updatedUser = InMemoryDB.updateUser(req.userId, (user) => {
      user.totalWeight += weight;
      user.totalPoints += Math.round(weight * 10);
      return user;
    });

    res.json({
      totalWeight: updatedUser.totalWeight,
      totalPoints: updatedUser.totalPoints
    });

  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// –†–µ–π—Ç–∏–Ω–≥
app.get('/api/leaderboard', (req, res) => {
  res.json(InMemoryDB.getLeaderboard());
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`üü¢ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`));
